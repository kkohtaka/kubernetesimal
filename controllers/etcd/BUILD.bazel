load("@io_bazel_rules_go//go:def.bzl", "go_library")

go_library(
    name = "etcd",
    srcs = [
        "endpointslice.go",
        "etcd.go",
        "etcdnode.go",
        "pki.go",
        "prober.go",
        "reconciler.go",
        "service.go",
        "ssh.go",
    ],
    importpath = "github.com/kkohtaka/kubernetesimal/controllers/etcd",
    visibility = ["//visibility:public"],
    deps = [
        "//api/v1alpha1",
        "//controller/errors",
        "//controller/expectations",
        "//controller/finalizer",
        "//k8s/endpointslice",
        "//k8s/etcdnode",
        "//k8s/object",
        "//k8s/secret",
        "//k8s/service",
        "//net/http",
        "//observability/tracing",
        "//pki",
        "//ssh",
        "@io_etcd_go_etcd_client_v3//:client",
        "@io_k8s_api//core/v1:core",
        "@io_k8s_api//discovery/v1:discovery",
        "@io_k8s_api//discovery/v1beta1",
        "@io_k8s_apimachinery//pkg/api/equality",
        "@io_k8s_apimachinery//pkg/api/errors",
        "@io_k8s_apimachinery//pkg/apis/meta/v1:meta",
        "@io_k8s_apimachinery//pkg/labels",
        "@io_k8s_apimachinery//pkg/runtime",
        "@io_k8s_apimachinery//pkg/types",
        "@io_k8s_client_go//util/workqueue",
        "@io_k8s_sigs_controller_runtime//:controller-runtime",
        "@io_k8s_sigs_controller_runtime//pkg/client",
        "@io_k8s_sigs_controller_runtime//pkg/event",
        "@io_k8s_sigs_controller_runtime//pkg/handler",
        "@io_k8s_sigs_controller_runtime//pkg/log",
        "@io_k8s_sigs_controller_runtime//pkg/source",
        "@io_k8s_utils//pointer",
        "@io_opentelemetry_go_otel_trace//:trace",
    ],
)
